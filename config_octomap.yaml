################################################################################
#  配置文件 (示例)
#
# 1) 宽高深改为 100x100x100
# 2) 障碍 80
# 3) num_runs=5: 随机生成5个环境，每次环境都对比多算法
# 4) use_octomap=true, coarse_resolution=4, fine_resolution=1
# 5) compare_algorithms=true => 依次跑(bfs, astar, opt, rrt, rrt_star, coarse_to_fine)
# 6) 在 rrt_settings/rrt_star_settings 里增大 step_size, max_iter, goal_threshold,
#    并加入 goal_bias 用来做目标偏好采样(在 algorithms_3d.py 中会读取该配置)
# 7) 在 opt_settings 中增加 jump_when_stuck=true, 让势场法可以随机跳出局部极小值
################################################################################

width: 100
height: 100
depth: 100

obstacle_count: 80
random_seed: null

num_runs: 5

start_random: true
goal_random: true
start_position: [0, 0, 0]
goal_position: [99, 99, 99]

use_octomap: true
coarse_resolution: 4
fine_resolution: 1

compare_algorithms: true
algorithm: "rrt_star"

visualization_mode: "voxel_scatter"
show_start_goal_in_vis: true

bfs_settings:
  neighbor_mode: "6"

astar_settings:
  neighbor_mode: "6"
  heuristic: "euclidean"

opt_settings:
  max_steps: 3000
  jump_when_stuck: true   # 自定义参数, 若陷入极小值则随机跳动

rrt_settings:
  step_size: 6
  max_iter: 5000
  goal_threshold: 8.0
  goal_bias: 0.1

rrt_star_settings:
  step_size: 6
  max_iter: 5000
  goal_threshold: 8.0
  rewire_radius: 6.0
  goal_bias: 0.1

coarse_to_fine_settings:
  coarse_planner: "bfs"
  fine_planner:   "astar"
  neighbor_mode: "6"
